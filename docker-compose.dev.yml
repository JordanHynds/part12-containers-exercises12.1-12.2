services:
  app:
    image: bloglist-frontend
    build:
      context: bloglist-frontend/. # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./bloglist-frontend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3000:3000
    environment:
      PORT: 3000
      REACT_APP_BACKEND_URL: http://localhost:3001/api
    container_name: bloglist-frontend # This will name the container hello-front-dev
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: bloglist-reverse-proxy
  express-server:
    # The name of the service, can be anything
    image: express-server # Declares which image to use
    build:
      context: bloglist-backend/. # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./bloglist-backend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      # Declares the ports to publish
      - 3001:3001
    environment:
      test_mongo_Uri: mongodb://the_username:the_password@mongo:27017/the_database
      mongo_Uri: mongodb://the_username:the_password@mongo:27017/the_database
    container_name: express-server
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./bloglist-backend/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
      # - ./mongo_volume:/data/db
    container_name: mongo
